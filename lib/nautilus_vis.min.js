!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("nautilus_vis",[],e):"object"==typeof exports?exports.nautilus_vis=e():t.nautilus_vis=e()}("undefined"!=typeof self?self:this,function(){return function(t){var e={};function n(i){if(e[i])return e[i].exports;var a=e[i]={i:i,l:!1,exports:{}};return t[i].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)n.d(i,a,function(e){return t[e]}.bind(null,a));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e);var i=i||{};$(document).on("initComplete",function(){var t=i.egoGraphVis;if(0!=t.zoomable){var e=t.zoom;t.zoomTranslate=e.translate(),t.checkZoom=function(i){var a=n([0,0])[1],r=n([t.graphDimensions.width,t.graphDimensions.height])[1];if(i.y<a||i.y>r){console.log(e.translate()),console.log(e.scale()),console.log(n([i.x,i.y])),console.log(n([t.graphDimensions.width,t.graphDimensions.height])),console.log(n([0,0])),t.group.call(e.event);var o=e.center(),s=e.translate(),l=n(o);e.scale(.9*e.scale());var c=function(t){var n=e.scale(),i=e.translate();return[t[0]*n+i[0],t[1]*n+i[1]]}(l);e.translate([s[0]+o[0]-c[0],s[1]+o[1]-c[1]]),t.group.transition().duration(500).call(e.event)}},$(document).on("animationFinished",function(){a(),console.log(e.translate()),console.log(e.scale())}),a()}function n(t){var n=e.scale(),i=e.translate();return[(t[0]-i[0])/n,(t[1]-i[1])/n]}function a(){var e=[300,501];console.log("coordinates"),console.log(e),console.log(n(e)),console.log(n([t.graphDimensions.width,t.graphDimensions.height]))}});i=i||{};$(document).on("initComplete",{focus_id:focus_id},function(t){var e=t.data.focus_id;e=parseInt(e);i.egoGraphVis;if(void 0===e||!e)e=function(t,e){e||(e=window.location.href),t=t.replace(/[\[\]]/g,"\\$&");var n=new RegExp("[?&]"+t+"(=([^&#]*)|&|#|$)").exec(e);return n?n[2]?decodeURIComponent(n[2].replace(/\+/g," ")):"":null}("focusid");e&&$(".centerNode").click(function(){var t=Flask.url_for("generate_colldata_from_collection",{focus_id:e});window.open(t,"_blank","location=0")}),$(window).on("storage",function(t){if("message"!=t.originalEvent.key)return;var e=JSON.parse(t.originalEvent.newValue);if(!e)return;"timelineVis:paperItem:mouseover"==e.command&&(n=e.data.pid,i=[],d3.selectAll(".node").filter(function(t){if(t.targetPaperIDs&&-1!=t.targetPaperIDs.indexOf(n))return i.push(t),!0}).classed("linkedToTimeline",!0),d3.selectAll(".link").filter(function(t){return-1!=i.indexOf(t.source)}).classed("linkedToTimeline",!0));var n,i;"timelineVis:paperItem:mouseout"==e.command&&(e.data.pid,d3.selectAll(".linkedToTimeline").classed("linkedToTimeline",!1))})}),(i=i||{}).default_options=function(){var t={width:960,height:500,lineChart:{margin:{top:30,right:20,bottom:30,left:50}}};t.lineChart.width=3*t.width/4-t.lineChart.margin.left-t.lineChart.margin.right,t.lineChart.height=110-t.lineChart.margin.top-t.lineChart.margin.bottom;var e=["rgb(228,26,28)","rgb(55,126,184)","rgb(77,175,74)","rgb(152,78,163)","rgb(255,127,0)","rgb(255,255,51)","rgb(166,86,40)","rgb(247,129,191)"];return e.splice(0,0,e.splice(1,1)[0]),{defaults:{colorScheme:e,dimensions:t}}}(),(i=i||{}).lineChartData=function(){function t(t){return t.nodes[0].pew_Class}function e(t){return t.nodes[0].funding}function n(t){var e=[];return t.forEach(function(t){if(void 0!==t.linkToEgo&&!0===t.linkToEgo){var n=+t.sourceYear,i=+t.targetYear;n>0&&i>0&&n>=i&&e.push(t)}}),e}function i(t){var e=d3.min(t,function(t){return t.targetYear>0?t.targetYear:null}),n=(new Date).getFullYear(),i=d3.max(t,function(t){return t.sourceYear<=n?t.sourceYear:null});return[e,i=Math.min(i,2017)]}function a(t){for(var e=[],n=t[0];n<=t[1];n++)e.push({year:n,count:0});return e}return{prepareData_allCitations:function(r){var o={};o.pew_Class=t(r),o.funding=e(r),o.values=[];var s=n(r.links),l=i(s);return s=s.filter(function(t){return t.sourceYear<=l[1]&&t.targetYear<=l[1]}),o.values=a(l),s.forEach(function(t){var e=t.sourceYear;o.values.filter(function(t){return t.year===e})[0].count++}),o},prepareData_egoAuthorPublications:function(r){var o={};o.pew_Class=t(r),o.funding=e(r),o.values=[];var s=i(n(r.links));o.values=a(s);var l=r.nodes[0].papers;return(l=l.filter(function(t){return t.Year>=s[0]&&t.Year<=s[1]})).forEach(function(t){o.values.filter(function(e){return e.year==t.Year})[0].count++}),o},prepareData_authorEigenfactorSum:function(r){var o={};o.pew_Class=t(r),o.funding=e(r),o.values=[];var s=i(n(r.links));o.values=a(s);var l=r.nodes[0].papers;return(l=l.filter(function(t){return t.Year>=s[0]&&t.Year<=s[1]})).forEach(function(t){var e=o.values.filter(function(e){return e.year==t.Year})[0];e.count=e.count+t.EF}),o}}}();i=i||{};String.prototype.capitalize=function(){return this.toLowerCase().replace(/\b\w/g,function(t){return t.toUpperCase()})};i=i||{};function a(t){this.data=t,this.notEgoNodes=this.data.nodes.slice(1),console.log(this.data),this.graphDimensions,this.colorScheme,this.nodePlacementOptions=["force1","spiral","spiral2"],this.nodePlacement=this.nodePlacementOptions[1],this.zoomable=!1,this.svg,this.group,this.node,this.link,this.egoNode,this.eigenFactorScale,this.domainsThisGraph,this.legend,this.yearTextDisplay,this.authorImageDiv,this.tooltip,this.tip,this.tick,this.force,this.colorScheme;return this.JSDColorScale=d3.scale.linear().domain(d3.extent(this.notEgoNodes,function(t){return t.js_div})).range(["red","blue"]),this.ClusterDistanceColorScale=d3.scale.linear().domain(d3.extent(this.notEgoNodes,function(t){return t.average_cluster_distance_to_center})).range(["#d53e4f","#f46d43","#fdae61","#fee08b","#e6f598","#abdda4","#66c2a5","#3288bd"]),this.opacityVals={node:1,nodePrevYear:.6,linkToEgo:.12,linkNotToEgo:.12,linkPrevYear:.04},this.doAnnotations=!1,this.animationState,this.transitionTimePerYear,this.transitionTimePerNode,this.linkAppearDuration=500,this.currNodeIndex,this.destinationNodeIndex,this.destinationYear,this.currYear,this.destinationNodeIndex=this.data.nodes.length-1,this.c=0,this.tt=0,this}$(document).on("initComplete",function(){var t=$(window).width();!function(){$(".node").addClass("tooltipster");var t=$(window).width();function e(t,e){var i="";return d3.select(t).each(function(t){if("paper"!==t.nodeType||t.updatedProps){if(0==t.idx){t.tooltipHtml="<p>",t.nodeType&&(t.tooltipHtml=t.tooltipHtml+t.nodeType.capitalize()+": "),t.tooltipHtml=t.tooltipHtml+t.name,t.tooltipHtml=t.tooltipHtml+"</p>";var a=t.papers.length;return t.tooltipHtml=t.tooltipHtml+"<p>Number of Publications: "+a+"</p>",i=t.tooltipHtml,null!=e&&e(i),i}}else{if(void 0!==t.citation&&t.citation.length>0)return i=function(t){return t.updatedProps=!0,n(t)}(t),null!=e&&e(i),i;$.ajax({dataType:"json",url:$SCRIPT_ROOT+"/_vis_get_more_paperinfo",data:{paperid:t.id},success:function(a){return console.log(a),t.Title=a.title,t.doi=a.doi,t.citation=a.citation,t.author_str=a.author_str,t.venue=a.venue,t.updatedProps=!0,i=n(t),null!=e&&e(i),i}})}}),i}function n(t){var e=$("<span>");e.append($('<p class="title">').text(t.Title)),e.append($('<p class="authors">').text(t.author_str)),e.append($('<p class="venue">').text(t.venue)),e.append($('<p class="year">').text(t.Year)),e.append($('<p class="domain">').text("Categories: "+t.Field_of_study_names)),t.tooltipHtml=e.html();var n=t.tooltipHtml;return n}$(".tooltipster").tooltipster({theme:"tooltipster-noir",maxWidth:.5*t,animation:null,animationduration:0,delay:0,updateAnimation:null,content:"<p>Click to see details of this paper</p>",contentAsHTML:!0,functionBefore:function(t,n){e(n.origin,function(e){t.content(e)})}})}(),function(){var t=$(window).width();$(".legendItem.other").tooltipster({theme:"tooltipster-noir",maxWidth:.5*t,animation:null,animationduration:0,delay:0,updateAnimation:null,content:"<p>These are papers in categories other than the ones above. Point your mouse at a specific paper to see the name of the category.</p>",contentAsHTML:!0});$(".egoGraphVisLegendHeader").tooltipster({theme:"tooltipster-noir",maxWidth:.5*t,animation:null,animationduration:0,delay:0,updateAnimation:null,content:"<p>The data underlying this visualization comes from the Microsoft Academic Graph. Each document has multiple associated Fields of Study. Here, these Fields are combined with the document's title, weighted using TF-IDF, and assigned a category using K-Means clustering. Mouse over the categories to highlight its papers, and to see more important terms.</p>",contentAsHTML:!0}),$(".legendItem").tooltipster({theme:"tooltipster-noir",maxWidth:.5*t,animation:null,animationduration:0,delay:0,updateAnimation:null,content:"<p>Loading...</p>",contentAsHTML:!0,functionBefore:function(t,e){var n=d3.select(e.origin);n.each(function(e){var n="<h3>Top terms in category "+e.DomainID+":</h3>";n+="<ul>";for(var i=0,a=e.DomainName.length;i<a;i++)n=n+"<li>"+e.DomainName[i]+"</li>";n+="</ul>",t.content(n)})}})}(),$(".yearArea, .yearTick").css("pointer-events","all").tooltipster({theme:"tooltipster-noir",maxWidth:.5*t,animation:null,animationduration:0,delay:0,updateAnimation:null,content:"<p>Loading...</p>",contentAsHTML:!0,functionInit:function(){console.log("tooltipster init")},functionBefore:function(t,e){var n=$(e.origin).data("year"),a=i.egoGraphVis.egoNode.papers.filter(function(t){return t.Year==n}).sort(function(t,e){return d3.descending(t.EF,e.EF)});if(0===a.length)return!1;!function(t,e,n,a){if(e[0].hasOwnProperty("citation")){var r='<h3 style="font-size: 100%">Top papers in this collection in '+t+":</h3>";r+="<ol>";for(var o=0,s=0,l=e.length;s<l;s++){var c=e[s];if(c.hasOwnProperty("citation")&&(r=r+"<li>"+c.citation+"</li>",++o===n))break}return r+="</ol>",i.egoGraphVis.tooltip=i.egoGraphVis.tooltip.html(r),null!=a&&a(r),r}var d=[];for(s=0,l=n;s<l;s++)s<e.length&&d.push(e[s].PaperID);$.ajax({dataType:"json",url:$SCRIPT_ROOT+"/_vis_get_more_paperinfo",data:{paperid:JSON.stringify(d)},success:function(n){console.log(n);var r=n.papers,o='<h3 style="font-size: 100%">Top papers in this collection in '+t+":</h3>";o+="<ol>";for(var s=0,l=r.length;s<l;s++)e[s].citation=r[s].citation,o=o+"<li>"+e[s].citation+"</li>";return o+="</ol>",i.egoGraphVis.tooltip=i.egoGraphVis.tooltip.html(o),null!=a&&a(o),o}})}(n,a,3,function(e){t.content(e)})}})}),String.prototype.capitalize=function(){return this.toLowerCase().replace(/\b\w/g,function(t){return t.toUpperCase()})},a.prototype.init=function(){var t=this;t.tick=t.makeTick(),t.force=t.makeForce(),!0===t.zoomable&&(t.zoom=t.makeZoom()),t.animationState="init",t.getDomainsThisGraph(),t.svg=d3.select("#graphDiv").append("svg").attr("id","graphSvg").attr("width",t.graphDimensions.width).attr("height",t.graphDimensions.height),t.group=t.svg.append("g").attr("class","graphContainer"),t.link=t.group.append("svg:g").attr("class","links").selectAll(".link"),t.node=t.group.append("svg:g").attr("class","nodes").selectAll(".node"),t.tooltip=d3.select("body").append("div").attr("class","nodeTooltip").style("position","absolute").style("width",t.graphDimensions.width/4+"px").style("z-index","10").style("visibility","hidden"),t.data.nodes[0].fixed=!0,t.data.nodes[0].x=t.graphDimensions.width/2,t.data.nodes[0].y=t.graphDimensions.height/2,t.data.nodes[0].color=t.JSDColorScale(0),t.egoNode=t.data.nodes[0];var e=d3.max(t.data.nodes,function(t){return t.EF});t.eigenFactorScale=d3.scale.linear().domain([0,e]).range([0,1]),t.data.nodes.forEach(function(e){"paper"===e.nodeType?e.radius=4.5+10*t.eigenFactorScale(e.EF):e.radius=10}),t.force.nodes(t.data.nodes),t.node=t.node.data(t.data.nodes);var n=t.node.enter();(n=n.append("svg:circle").attr("class","node").classed("centerNode",function(e){return e.id===t.egoNode.id}).attr("r",function(t){return t.radius}).attr("T",0).attr("r",1e-9).each(function(e){if(e.DomainName=t.data.graph.Domains[e.DomainID],"Science Communication and Misinformation"===t.data.nodes[0].name)e.color=t.colorScheme[e.tfidf_kmeans_category];else for(var n=0;n<t.domainsThisGraph.length;n++){if(t.domainsThisGraph[n].key==e.DomainID){var i=t.domainsThisGraph[n].color;e.color=i}}}).attr("fill",function(t){return t.color}).style("opacity",t.opacityVals.node)).call(t.force.drag),t.force.links(t.data.links),t.link=t.link.data(t.data.links);t.link.enter().append("svg:line").attr("class",function(t){return 0===t.target?"link hidden toEgo linkToEgo":"link hidden notToEgo linkNotToEgo"}).attr("T",0).style("opacity",function(e){var n=t.opacityVals;return e.linkToEgo?n.linkToEgo:n.linkNotToEgo});!function(){switch(t.nodePlacement){case t.nodePlacementOptions[0]:t.force.start();for(var e=0;e<1e5;++e)t.force.tick();t.force.stop(),n.each(function(t){t.fixed=!0});break;case t.nodePlacementOptions[1]:var i=t.egoNode.x,a=t.egoNode.y,r=20,o=t.data.nodes.length;n.each(function(t,e){if(0!=t.idx){t.fixed=!0;var n=.95*Math.pow(e,1)+r,o=e*(Math.PI/(8.5+.05*e));t.x=i+n*Math.cos(o),t.y=a+n*Math.sin(o)}}),t.force.start(),t.force.tick(),t.force.stop();break;case t.nodePlacementOptions[2]:function s(t,e,n){for(var i=Math.PI+Math.PI;;){var a=l(t,i)-e;if(Math.abs(a)<=n)return i;i-=a/(t*Math.sqrt(i*i+1))}}function l(t,e){var n=Math.sqrt(1+e*e);return.5*t*(e*n+Math.log(e+n))}var c=function(t,e){for(var n=5,i=0,a=[],r=0,o=t;r<o;r++){var l=s(e,i,5e-5);a.push(l),i+=n,r>10&&(n=10),r>50&&(n=15)}return a}(o=t.data.nodes.length,7);i=t.egoNode.x,a=t.egoNode.y,r=20,o=t.data.nodes.length,console.log(o),n.each(function(t,e){if(0!=t.idx){t.fixed=!0,Math.PI;var n=d3.scale.pow().exponent(.7).domain([1,o]).range([0,60]),s=(n=d3.scale.linear().domain([1,Math.pow(o,.3)]).range([0,60]),n=d3.scale.log().domain([100,o+100]).range([0,60]),Math.pow(e+1,.3),n(e+100));s=c[e],t.x=i+(r+7*s)*Math.cos(s),t.y=a+(r+7*s)*Math.sin(s)}}),t.force.start(),t.force.tick(),t.force.stop()}}(),t.legendInit(),t.addAuthorImage(),t.addEventListeners(),t.yearTextDisplay=t.svg.append("svg:text").attr("x",8*t.graphDimensions.width/9).attr("y",12*t.graphDimensions.height/13).attr("dy","-.3em").attr("font-size","10em").attr("text-anchor","end").style("pointer-events","none").style("opacity",1e-9).attr("id","egoGraphVis_yearIndicator").text(t.data.graph.yearRange[0]),t.revealEgoNode()},a.prototype.makeZoom=function(){var t=this;return d3.behavior.zoom().center([t.graphDimensions.width/2,t.graphDimensions.height/2]).scaleExtent([.2,10]).on("zoom",function(){t.group.attr("transform","translate("+d3.event.translate+")scale("+d3.event.scale+")")})},a.prototype.makeTick=function(){var t=this;function e(t){return t.source.x}function n(t){return t.source.y}function i(t){return t.target.x}function a(t){return t.target.y}function r(e){return!1===t.zoomable&&(e.x=Math.max(4.5,Math.min(t.graphDimensions.width-4.5,e.x)),e.y=Math.max(4.5,Math.min(t.graphDimensions.height-4.5,e.y))),"translate("+e.x+","+e.y+")"}return function(){t.link.attr("x1",e).attr("y1",n).attr("x2",i).attr("y2",a),t.node.attr("transform",r)}},a.prototype.makeForce=function(){return d3.layout.force().size([this.graphDimensions.width,this.graphDimensions.height]).linkDistance(225).on("tick",this.tick)},a.prototype.importDefaultOptions=function(t){this.colorScheme=t.colorScheme,this.graphDimensions=t.dimensions,this.transitionTimePerYear=t.transitionTimePerYear,console.log(t)},a.prototype.getDomainsThisGraphLegacy=function(){var t=this.data.graph.Domains;console.log(t);var e=this.colorScheme.length;this.domainsThisGraph=d3.nest().key(function(t){return t.DomainID}).rollup(function(t){return t.length}).entries(this.notEgoNodes);for(var n=0;n<this.domainsThisGraph.length;n++){var i=this.domainsThisGraph[n].key;this.domainsThisGraph[n].DomainID=i,n<e-1?(this.domainsThisGraph[n].DomainName=t[i],this.domainsThisGraph[n].color=this.colorScheme[n]):(this.domainsThisGraph[n].DomainName="Other",this.domainsThisGraph[n].color=this.colorScheme[e-1])}console.log(this.domainsThisGraph)},a.prototype.getDomainsThisGraphTfidf=function(){var t=this.colorScheme.length,e=this.data.graph.tfidf_kmeans_categories;this.domainsThisGraph=[];for(var n=0;n<t;n++)this.domainsThisGraph.push({}),this.domainsThisGraph[n].DomainID=n,this.domainsThisGraph[n].DomainName=e[n],this.domainsThisGraph[n].color=this.colorScheme[n];console.log(this.domainsThisGraph)},a.prototype.getDomainsThisGraph=function(){void 0===this.data.graph.tfidf_kmeans_categories?this.getDomainsThisGraphLegacy():this.getDomainsThisGraphTfidf()},a.prototype.legendInit=function(){var t=this,e=["computer science, data mining, ...","sociology, social science, ...","medicine, health, ...","economics, business, ...","psychology, cognition, ...","political science, ...","biology, ecology, ...","climate change, ..."],n=t.graphDimensions.width/70,i=n/3,a=n+i;t.legend=t.svg.append("g").attr("class","legend").attr("transform","translate("+i+","+i+")");var r=n;t.legend.append("svg:text").attr("transform","translate(0, "+r+")").attr("class","egoGraphVisLegendHeader").text("Categories ⓘ");var o=t.legend.selectAll("g").data(t.domainsThisGraph).enter().append("g").attr("class","legendItem").attr("id",function(t){return"legendDomain"+t.DomainID}).on("mouseover",function(t){d3.selectAll(".node").filter(function(e){return t.color==e.color}).classed("legendHover",!0)}).on("mouseout",function(t){d3.selectAll(".node").classed("legendHover",!1)}).attr("display",function(e,n){return n<t.colorScheme.length?"":"none"});o.append("svg:rect").attr("width",n).attr("height",n).attr("transform",function(t,e){return"translate(0,"+(r+i+a*e)+")"}).attr("fill",function(t){return t.color}),t.legendText=o.append("svg:text").attr("transform",function(t,e){return"translate("+a+","+(r+i+a*e)+")"}).attr("dy","1em").text(function(n,i){return"Science Communication and Misinformation"===t.data.nodes[0].name?"C"+i+" ("+e[i]+")":0!=n.DomainID&&"other"==n.DomainName.toLowerCase()?"Papers in other categories":'Papers in category "'+n.DomainName+'"'}).style("font-size",".9em")},a.prototype.addAuthorImage=function(){var t=this;if(t.egoNode.hasOwnProperty("name")&&(t.egoNode.AuthorName=t.egoNode.name),t.egoNode.hasOwnProperty("AuthorName")){t.authorImageDiv=t.svg.append("foreignObject").attr("class","externalObject").attr("x",0).attr("y",t.graphDimensions.height/2-50).attr("height","100%").attr("width",t.graphDimensions.height/5).append("xhtml:div").attr("id","authorImageDiv"),t.authorImageDiv.append("xhtml:p").html("<p>"+t.data.nodes[0].AuthorName.capitalize()+"</p>");var e=t.authorImageDiv.append("xhtml").attr("id","authorImageContainer"),n=t.data.nodes[0].organization;console.log(n),void 0!==n&&d3.tsv("static/healthra/orgs_with_links.tsv",function(e,a){if(e)throw e;console.log(a);for(var r=0,o=a.length;r<o;r++)if(a[r].org_name==n){var s=a[r].match_name;if(void 0!==s&&""!=s){var l=a[r].link,c=a[r].img_url;t.authorImageDiv.append("xhtml:p").html('<a href="'+l+'" target="_blank"><p style="margin: 0; padding: 0; font-size: .85em">'+s+"</p>");var d=i(c);d.style("cursor","pointer"),d.on("click",function(){console.log(l),window.open(l,"_blank")})}else t.authorImageDiv.append("xhtml:p").html('<p style="margin: 0; padding: 0; font-size: .85em">'+n+"</p>")}})}function i(t){return e.append("xhtml:img").attr("src",t).attr("id","authorImage").attr("width","85px")}var a=t.data.nodes[0].AuthorImgUrl||t.data.nodes[0].ImgURL;if(console.log(a),void 0===a){if(void 0!==(r=t.data.nodes[0].PewScholarID)){var r;!function t(e,n,a){var r=e+n[a];if(a>=n.length)return!1;$.get(r).done(function(){i(r)}).fail(function(){t(e,n,a+1)})}("static/img/pew_photos/"+(r=(r="000"+(r=r.toString())).substr(r.length-3)),[".png",".jpg",".jpeg",".JPG",".JPEG",".PNG"],0);var o=t.data.nodes[0].pew_Class;void 0!==o&&t.authorImageDiv.append("xhtml:p").html('<p style="margin: 0; padding: 0; font-size: .85em">Pew Scholar '+o+"</p>")}}else i(a)},a.prototype.addEventListeners=function(){var t=this;!0===t.zoomable&&t.group.call(t.zoom),d3.selectAll(".node").each(function(t){t.updatedProps=!1,t.tooltipHtml="<p>Loading...</p>"}),d3.selectAll(".node").on("mouseover",function(t){t.hovered=!0;d3.select(this)}).on("mousemove",function(t){}).on("mouseout",function(e){e.hovered=!1,t.tooltip=t.tooltip.style("visibility","hidden")}).on("click",function(t){if("paper"===t.nodeType){if(t.hasOwnProperty("doi")&&""!==t.doi)var e="https://doi.org/"+t.doi;else e="https://academic.microsoft.com/paper/"+t.id;window.open(e,"_blank")}})},a.prototype.makeTooltip=function(t,e){if("author"===t.nodeType||""===t.nodeType||"venue"===t.nodeType){var n='<p class="authorName">Author: '+t.AuthorName+"</p>";t.pew_Class&&(n=n+'<p class="pewClass">Pew Class: '+t.pew_Class+"</p>");var i=t.papers.length;e(n=n+'<p class="numberOfPubs">Number of Publications: '+i+"</p>")}function a(t){var e=[];return t.forEach(function(t){var n=t[1].split(" "),i=(n=n.map(function(t){return t!=t.toUpperCase()?t.capitalize():t})).join(" ");e.push(i)}),e}function r(t,e){$.ajax({dataType:"json",url:$SCRIPT_ROOT+"/_vis_get_title",data:{paperid:t},success:function(t){e(t.title)}})}function o(){var e="";e+='<p class="paperTitle">',e+=t.Title,e=(e+="</p>")+'<p class="paperYear">'+t.Year+"</p>";var n=[];return t.authorList.forEach(function(t){n.push(t)}),e=e+'<p class="paperAuthor">Authors: '+n.join(", ")+"</p>"}if(t.hasOwnProperty("authors")){var s=a(t.authors);if(t.authorList=s,t.hasOwnProperty("Title")){n=o();e(n)}else r(t.id,function(n){t.Title=n;var i=o();e(i)})}else $.ajax({dataType:"json",url:$SCRIPT_ROOT+"/_vis_get_authorinfo",data:{authorids:JSON.stringify(t.AuthorIDList)},success:function(n){t.authors=n.authors;var i=a(t.authors);if(t.authorList=i,t.hasOwnProperty("Title")){var s=o();e(s)}else r(t.id,function(n){t.Title=n;var i=o();e(i)})}})},a.prototype.revealEgoNode=function(){var t=this;t.currNodeIndex=0,t.currYear=t.data.graph.yearRange[0],d3.selectAll(".node").filter(function(e){return e.id===t.egoNode.id}).classed("hidden",!1).classed("visible",!0).transition().duration(2e3).attr("r",function(t){return t.radius}).attr("T",1).each("start",function(){t.yearTextDisplay.transition().delay(1e3).duration(1e3).style("opacity",.15)}).each("end",function(){$.event.trigger({type:"yearChange"}),t.animateToDestinationNode()})},a.prototype.animateToDestinationNode=function(){this.currNodeIndex===this.destinationNodeIndex?(console.log("goto finish"),this.finishAnimation()):this.currNodeIndex<this.destinationNodeIndex?(this.animationState="forward",this.currNodeIndex++,this.checkYear()):this.currNodeIndex>this.destinationNodeIndex&&(this.animationState="rewind",this.currNodeIndex--,this.checkYear())},a.prototype.continue=function(){void 0===this.transitionTimePerNode&&this.calculateTransitionTime(),"forward"===this.animationState?this.drawNode():"rewind"===this.animationState&&this.removeNode()},a.prototype.checkYear=function(){var t=this;if(t.currNodeIndex==t.data.nodes.length-1)return t.currYear=t.data.graph.yearRange[1],t.yearTextDisplay.text(t.currYear),$.event.trigger({type:"yearChange"}),void t.continue();var e=t.data.nodes.filter(function(e){return e.idx===t.currNodeIndex}),n=t.currYear,i=e[0].Year;return i==n?t.continue():i>n?(t.c=0,t.tt=0,t.currYear++,t.beginNewYear()):i<n&&(t.currYear--,t.beginNewYear()),t.currYear},a.prototype.beginNewYear=function(){var t=this;t.yearTextDisplay.text(t.currYear),$.event.trigger({type:"yearChange"}),t.calculateTransitionTime(),0===t.notEgoNodes.filter(function(e){return e.Year==t.currYear}).length?setTimeout(function(){t.checkYear()},t.transitionTimePerYear[t.currYear]):t.continue()},a.prototype.drawNode=function(){var t=this;d3.selectAll(".node").filter(function(e){return e.idx===t.currNodeIndex}).classed("hidden",!1).classed("visible",!0).transition().ease("linear").duration(t.transitionTimePerNode).attr("r",function(t){return t.radius}).attr("T",1).each("end",function(e){var n;t.c++,!0===t.zoomable&&t.checkZoom(e),t.animateToDestinationNode(),(n=e).linksThisNodeIsSource=d3.selectAll(".link").filter(function(t){return t.source===n}),n.linksThisNodeIsSource.classed("hidden",!1).classed("visible",!0).each(function(t){t.inTransition=!0}).attr("x2",function(t){return t.source.x}).attr("y2",function(t){return t.source.y}).style("visibility","visible").transition().ease("linear").delay(0).duration(t.linkAppearDuration).attr("x2",function(t){return t.target.x}).attr("y2",function(t){return t.target.y}).attr("T",1).each("end",function(t){t.inTransition=!1})})},a.prototype.removeNode=function(){var t=this;t.animationState="rewind";d3.selectAll(".node").filter(function(e){return e.index===t.currNodeIndex});var e=d3.selectAll(".link").filter(function(e){return e.source.index===t.currNodeIndex}),n=t.transitionTimePerNode;e.transition().each("start",function(t){t.inTransition=!0}).duration(n).ease("quad").attr("x2",function(t){return t.source.x}).attr("y2",function(t){return t.source.y}).call(function(e){e.inTransition=!1,d3.selectAll(".node").filter(function(e){return e.idx===t.currNodeIndex}).transition().duration(t.transitionTimePerNode).ease("quad").attr("r",0).attr("T",1).each("end",function(e){d3.select(this).classed("hidden",!0).classed("visible",!1),t.animateToDestinationNode()})})},a.prototype.finishAnimation=function(){this.animationState="stopped",$.event.trigger({type:"animationFinished"}),console.log("finished"),console.log(this.currNodeIndex)},a.prototype.newDestinationNode=function(t){this.destinationYear=t,console.log(this.destinationYear),this.getDestinationNode(),this.currNodeIndex!==this.destinationNodeIndex&&(this.currNodeIndex<this.destinationNodeIndex?(this.animationState="forward",this.drawNode()):(this.animationState="rewind",this.removeNode()))},a.prototype.getDestinationNode=function(){var t=this,e=t.data.graph.yearRange[1];function n(){return t.notEgoNodes.filter(function(e){return e.Year==t.destinationYear})}var i=n();if(i.length>0){var a=i[i.length-1];t.destinationNodeIndex=a.idx}else t.destinationYear==e?function e(){t.destinationYear--;var i=n();i.length>0?t.getDestinationNode():e()}():(t.destinationYear++,t.getDestinationNode())},a.prototype.calculateTransitionTime=function(){var t=this.data.graph.nodeCountsPerYear[this.currYear];this.transitionTimePerNode=t?this.transitionTimePerYear[this.currYear]/t:0,this.transitionTimePerNode=this.transitionTimePerNode-10},a.prototype.revealFinalState=function(){var t=this;d3.selectAll(".node, .link").transition().duration(0),t.node.classed("hidden",!1).attr("r",function(t){return t.radius}).each(function(e){!0===t.zoomable&&t.checkZoom(e)}),t.link.classed("hidden",!1).classed("visible",!0).style("visibility","visible").attr("x2",function(t){return t.target.x}).attr("y2",function(t){return t.target.y}).each(function(t){t.inTransition=!1}),t.currNodeIndex=t.data.nodes.length-1,t.currYear=t.data.graph.yearRange[1],t.yearTextDisplay.text(t.currYear),$.event.trigger({type:"yearChange"}),t.finishAnimation()},(i=i||{}).egoGraphData=function(t){return{prepare_egoGraphData:function(t){for(r=0;r<t.nodes.length;r++)t.nodes[r].oldIdx=r;var e={},n=["graph","directed","multigraph"];for(r=0;r<n.length;r++){var i=n[r];t.hasOwnProperty(i)&&(e[i]=t[i])}e.nodes=[],e.nodes.push(t.nodes[0]),e.nodes[0].idx=0;for(var a=[],r=1;r<t.nodes.length;r++)t.nodes[r].Year>0&&""!=t.nodes[r].Title&&a.push(t.nodes[r]);if(d3.shuffle(a),a.sort(function(t,e){return d3.descending(t.EF,e.EF)}),void 0===o)var o=274;for((a=function(t){for(var e=[],n=[],i=0,a=t.length;i<a;i++)0!=t[i].DomainID?e.push(t[i]):n.push(t[i]);console.log(t);var r=e.concat(n);return console.log(r),r}(a)).length>o&&(a=a.slice(0,o)),a.sort(function(t,e){return d3.ascending(t.Year,e.Year)||d3.descending(t.EF,e.EF)}),r=0;r<a.length;r++){var s=a[r];s.idx=e.nodes.length,e.nodes.push(s)}e.links=function(t,e){var n=[];for(r=0;r<e.length;r++){var i=t.filter(function(t){return t.id===e[r].source}),a=t.filter(function(t){return t.id===e[r].target});if(i.length>0&&a.length>0)if("paper"===a[0].nodeType&&i[0].Year<a[0].Year);else{var o=e[r];o.source=i[0].idx,o.target=a[0].idx,n.push(e[r])}}return n.forEach(function(t){"number"!=typeof t.target&&console.log(t)}),n}(e.nodes,t.links),e.links.length||(e.links=function(t,e){var n=[];for(r=0;r<e.length;r++){var i=t.filter(function(t){return t.oldIdx===e[r].source}),a=t.filter(function(t){return t.oldIdx===e[r].target});if(i.length>0&&a.length>0)if("paper"===a[0].nodeType&&i[0].Year<a[0].Year);else{var o=e[r];o.source=i[0].idx,o.target=a[0].idx,n.push(e[r])}}return n}(e.nodes,t.links));var l=e.graph.yearRange;return e.graph.nodeCountsPerYear=function(t,e){for(var n=d3.nest().key(function(t){return t.Year}).sortKeys(d3.ascending).rollup(function(t){return t.length}).map(t.slice(1)),i={},a=e[0];a<=e[1];a++){var r=n[a];i[a]=void 0===r?0:r}return i}(e.nodes,l),console.log(e),e}}}(),(i=i||{}).eventListeners={};i=i||{};function r(t){return this.data=t.values,this.pew_Class=t.pew_Class,this.hra_funding=t.funding,this.lineChartDimensions,this.colorScheme,this.x,this.y,this.chartDiv,this.svg,this.svgDefs,this.title,this.clipPath,this.currYearIndicator,this.yearArea,this.yearAreaOpacity=.1,this.xAxis,this.yAxis,this.line,this.area,this.chartLine,this.chartArea,this.linearGradient,this.animationState,this.currYear,this.transitionTimePerYear,this.yearRange=d3.extent(this.data,function(t){return t.year}),this.yearRange[1]=Math.min(this.yearRange[1],2017),this.fundingTime,void 0!==this.pew_Class&&(this.fundingTime=4),void 0!==this.hra_funding&&(this.hra_funding=this.hra_funding[0],this.fundingTime=this.hra_funding.duration_in_years,this.pew_Class=this.hra_funding.start_date),this}$(document).on("initComplete",function(){var t=i.egoGraphVis,e=t.data.graph.DomainsMult;if(e&&function(t,e){e||(e=window.location.href),t=t.replace(/[\[\]]/g,"\\$&");var n=new RegExp("[?&]"+t+"(=([^&#]*)|&|#|$)").exec(e);return n?n[2]?decodeURIComponent(n[2].replace(/\+/g," ")):"":null}("domainsMult")){var n=$("<div>");n.append($("<label>").text("Color by: ").css("display","inline"));n.append($("<select>").attr("id","domain_select"));$("#mainDiv").prepend(n),$.each(e,function(t,e){$("#domain_select").append($("<option>").text(t)),d3.select("#mainDiv").append("p").text(t).on("click",function(){a(t)})}),$("#domain_select").val("category_from_keyword"),$("#domain_select").on("change",function(){a($(this).val())})}function a(n){t.data.graph.Domains=e[n];for(var i=0,a=t.notEgoNodes.length;i<a;i++){var r=t.notEgoNodes[i];r.DomainID=r.DomainMult[n]}t.getDomainsThisGraph(),d3.selectAll(".legendItem").remove(),t.legendInit(),d3.selectAll(".node").each(function(e){e.DomainName=t.data.graph.Domains[e.DomainID];for(var n=0;n<t.domainsThisGraph.length;n++){if(t.domainsThisGraph[n].key==e.DomainID){var i=t.domainsThisGraph[n].color;e.color=i}}}).transition().duration(200).attr("fill","white").each("end",function(){d3.select(this).transition().duration(200).attr("fill",function(t){return t.color})}),d3.transition().duration(400).each("end",function(){t.revealFinalState()})}}),r.prototype.init=function(){var t=this;t.animationState="init",t.currYear=t.yearRange[0],t.x=d3.scale.linear().range([0,t.lineChartDimensions.width]),t.y=d3.scale.linear().range([t.lineChartDimensions.height,0]),t.chartDiv=d3.select("#chartsDiv").append("div").attr("class","chartDiv"),t.svg=t.chartDiv.append("svg").attr("width",t.lineChartDimensions.width+t.lineChartDimensions.margin.left+t.lineChartDimensions.margin.right).attr("height",t.lineChartDimensions.height+t.lineChartDimensions.margin.top+t.lineChartDimensions.margin.bottom).attr("class","lineChart").append("g").attr("transform","translate("+t.lineChartDimensions.margin.left+","+t.lineChartDimensions.margin.top+")"),t.svgDefs=t.svg.append("defs"),t.x.domain(t.yearRange),t.y.domain([0,d3.max(t.data,function(t){return t.count})]),t.xAxis=d3.svg.axis().scale(t.x).orient("bottom").tickFormat(d3.format("d")).ticks(Math.min(t.data.length,20)),t.yAxis=d3.svg.axis().scale(t.y).orient("left").ticks(2).tickSize(0),t.line=d3.svg.line().x(function(e){return t.x(e.year)}).y(function(e){return t.y(e.count)}),t.area=d3.svg.area().x(function(e){return t.x(e.year)}).y0(t.lineChartDimensions.height).y1(function(e){return t.y(e.count)}),t.svg.append("g").attr("class","x axis").attr("transform","translate(0,"+t.lineChartDimensions.height+")").call(t.xAxis);t.svg.select(".x.axis").selectAll(".tick").attr("class","yearTick").attr("data-year",function(t){return t}).style("font-size",".75em"),t.svg.selectAll(".yearTick").append("svg:rect").attr("fill",t.colorScheme[4]).style("opacity",0).attr("class","highlightRect").each(function(t){var e=this.parentNode.getBBox(),n=e.width/4;d3.select(this).attr("x",e.x-n).attr("y",e.y).attr("width",e.width+2*n).attr("height",e.height)});t.svg.append("g").attr("class","y axis").call(t.yAxis).append("text").attr("transform","rotate(-90)").attr("y",-t.lineChartDimensions.margin.left/2-6).attr("x",-(t.lineChartDimensions.height+t.lineChartDimensions.margin.top+t.lineChartDimensions.margin.bottom)/2).attr("class","axisLabel").text("Num citations").attr("font-size",".5em"),t.linearGradient=d3.select("#line-gradient"),t.chartArea=t.svg.append("g").append("path").datum(t.data).attr("class","area").style("fill","url(#line-gradient)").attr("d",t.area),t.chartLine=t.svg.append("g").append("path").datum(t.data).attr("class","line").style("stroke","black").attr("d",t.line),t.currYearIndicator=t.svg.append("svg:line").attr("class","verticalLine yearIndicator hidden").attr("T",0).attr("x1",t.x(t.currYear)).attr("x2",t.x(t.currYear)).attr("y1",t.lineChartDimensions.height).attr("y2",0).attr("stroke-width",2).attr("stroke","black").attr("stroke-dasharray","5, 2").style("opacity",.25),t.yearArea=t.svg.selectAll(".yearArea").data(t.data).enter().append("svg:rect").attr("class","yearArea hidden").attr("data-year",function(t){return t.year}).attr("x",function(e){return t.x(e.year)}).attr("y",0).attr("width",function(e){return t.x(e.year+1)-t.x(e.year)}).attr("height",t.lineChartDimensions.height).attr("fill",t.colorScheme[4]).style("opacity",0),void 0!==t.pew_Class&&t.makeFundingLines(t.pew_Class)},r.prototype.importDefaultOptions=function(t){this.colorScheme=t.colorScheme,this.lineChartDimensions=t.dimensions.lineChart,this.transitionTimePerYear=t.transitionTimePerYear},r.prototype.makeColorGradient=function(t){console.log(t);var e=this.x(this.yearRange[1]);return this.svg.append("linearGradient").attr("id","line-gradient").attr("gradientUnits","userSpaceOnUse").attr("x1",0).attr("y1",this.x(this.yearRange[0])).attr("x2",e).attr("y2",0).selectAll("stop").data([{offset:this.x(this.yearRange[0])/e,color:d3.rgb(this.colorScheme[7]).darker()},{offset:this.x(t-1)/e,color:d3.rgb(this.colorScheme[7]).darker()},{offset:this.x(t+1)/e,color:this.colorScheme[2]},{offset:this.x(t+this.fundingTime-1)/e,color:this.colorScheme[2]},{offset:this.x(t+this.fundingTime+1)/e,color:this.colorScheme[0]},{offset:1,color:this.colorScheme[0]}]).enter().append("stop").attr("offset",function(t){return t.offset}).attr("stop-color",function(t){return t.color})},r.prototype.makeFundingLines=function(t){this.svg.append("svg:line").attr("class","verticalLineStatic verticalLineFundingBegin").attr("x1",this.x(t)).attr("x2",this.x(t)).attr("y1",this.lineChartDimensions.height).attr("y2",0).attr("stroke-width",2).attr("stroke",this.colorScheme[2]).style("stroke-dasharray","5, 2").style("opacity",.8),this.svg.append("svg:line").attr("class","verticalLineStatic verticalLineFundingEnd").attr("x1",this.x(t+this.fundingTime)).attr("x2",this.x(t+this.fundingTime)).attr("y1",this.lineChartDimensions.height).attr("y2",0).attr("stroke-width",2).attr("stroke",this.colorScheme[0]).style("stroke-dasharray","5, 2").style("opacity",.8)},r.prototype.changeAnimationState=function(t){var e=this;e.animationState=t,console.log(e.animationState),"forward"===e.animationState&&(e.currYearIndicator.attr("T"),e.currYearIndicator.attr("data-state","forward").classed("hidden",!1).transition().duration(e.transitionTimePerYear[e.currYear]).ease("linear").attr("x1",e.x(e.currYear)).attr("x2",e.x(e.currYear)).attr("data-state","stopped").attr("T",1).each("end",function(){d3.select(this).attr("T",0),e.currYear++}))},r.prototype.correctYear=function(t){t!=this.currYear&&(this.currYear=t,this.currYearIndicator.attr("x1",this.x(this.currYear)).attr("x2",this.x(this.currYear)),this.changeAnimationState())},r.prototype.moveYearIndicator=function(t){var e=this;e.currYear=t,e.currYearIndicator.attr("T",0).transition().duration(e.transitionTimePerYear[e.currYear]).ease("linear").attr("x1",e.x(e.currYear)).attr("x2",e.x(e.currYear)).attr("T",1).each("end",function(){d3.select(this).attr("T",0)}),e.svg.selectAll(".yearTick").selectAll(".currYear").classed(".currYear",!1).transition().duration(e.transitionTimePerYear[e.currYear]/4).style("opacity",0),e.svg.selectAll(".yearArea.currYear").classed("currYear",!1).transition().duration(e.transitionTimePerYear[e.currYear]/4).style("opacity",function(t){return t.year<e.currYear?e.yearAreaOpacity/2:0}),e.yearArea.filter(function(t){return t.year==e.currYear}).classed("currYear",!0).classed("hidden",!1).style("opacity",2*e.yearAreaOpacity).transition().duration(e.transitionTimePerYear[e.currYear]/2).style("opacity",e.yearAreaOpacity),e.yearArea.filter(function(t){return t.year<e.currYear}).classed("hidden",!1).style("opacity",e.yearAreaOpacity/2),e.yearArea.filter(function(t){return t.year>e.currYear}).style("opacity",0),console.log(e.currYear)},r.prototype.addTitle=function(t){this.title=this.svg.append("text").attr("class","lineChartTitle").attr("x",this.lineChartDimensions.width/2).attr("y",0-this.lineChartDimensions.margin.top/2).attr("text-anchor","middle").text(t)},(i=i||{}).summaryStatistics=function(){return{addSummaryStatistics:function(t){function e(t){var e=[];return t.forEach(function(t){if(void 0!==t.linkToEgo&&!0===t.linkToEgo){var n=+t.sourceYear,i=+t.targetYear;n>0&&i>0&&n>=i&&e.push(t)}}),e}var n,i,a,r;return t.graph.yearRange=(n=t.links,i=e(n),a=d3.min(i,function(t){return t.targetYear>0?t.targetYear:null}),r=(new Date).getFullYear(),[a,d3.max(i,function(t){return t.sourceYear<=r?t.sourceYear:null})]),t.graph.citationCountsPerYear=function(t){var n=function(t){for(var e=[],n=t[0];n<=t[1];n++)e.push({year:n,count:0});return e}(t.graph.yearRange);return e(t.links).forEach(function(t,e){var i=t.sourceYear;n.filter(function(t){return t.year===i})[0].count++}),n}(t),t}}}(),(i=i||{}).getTransitionTimePerYear=function(t,e){console.log(t);for(var n={},i=(e=void 0!==e?e:4e3,d3.scale.threshold().domain([1,3,10,20,30]).range([300,.2*e,.5*e,.7*e,.85*e,e])),a=t.graph.yearRange,r=a[0];r<=a[1];r++)n[r]=i(t.graph.nodeCountsPerYear[r]);return n},i.yearTickClickEventListener=function(){d3.selectAll(".yearTick").on("click",function(t){var e=this.getAttribute("data-year");d3.selectAll(".node, .link").transition().duration(0),i.egoGraphVis.newDestinationNode(e)})},n.d(e,"citationVis",function(){return i}),n.d(e,"egoGraphVis",function(){return a}),n.d(e,"lineChartByYear",function(){return r})}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,