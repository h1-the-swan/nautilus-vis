!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("nautilus-vis",[],t):"object"==typeof exports?exports["nautilus-vis"]=t():e["nautilus-vis"]=t()}("undefined"!=typeof self?self:this,function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var a=t[n]={i:n,l:!1,exports:{}};return e[n].call(a.exports,a,a.exports,r),a.l=!0,a.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)r.d(n,a,function(t){return e[t]}.bind(null,a));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";r.r(t);var n=n||{};n.getTransitionTimePerYear=function(e,t){console.log(e);for(var r={},n=(t=void 0!==t?t:4e3,d3.scale.threshold().domain([1,3,10,20,30]).range([300,.2*t,.5*t,.7*t,.85*t,t])),a=e.graph.yearRange,i=a[0];i<=a[1];i++)r[i]=n(e.graph.nodeCountsPerYear[i]);return r},n.yearTickClickEventListener=function(){d3.selectAll(".yearTick").on("click",function(e){var t=this.getAttribute("data-year");d3.selectAll(".node, .link").transition().duration(0),n.egoGraphVis.newDestinationNode(t)})};var a=function(){"ABORT"!==citationvis_data&&(d3.select("#mainDiv").append("p").attr("class","loadingText").text("Loading..."),d3.json(citationvis_data,function(e,t){if(console.log(e),e)throw $(".loadingText").html('There was an error generating the visualization, or else data processing is still in progress. Try reloading the page later, or generating the visualization again. If the problem persists, <a href="mailto:jporteno@uw.edu">contact the administrator</a>.').css({color:"red"}),e;var r=d3.nest().key(function(e){return e.DomainID}).sortValues(d3.descending).rollup(function(e){return e.length}).entries(t.nodes[0].papers);r.sort(function(e,t){return d3.descending(e.values,t.values)}),t.nodes[0].DomainCounts=r,console.log(t);var a=n.default_options,i=n.summaryStatistics,o=n.egoGraphData,s=n.lineChartData,l=(n.eventListeners,a.defaults);console.log(l),t=i.addSummaryStatistics(t),n.graph_data=o.prepare_egoGraphData(t),n.publications_data=s.prepareData_egoAuthorPublications(t),n.all_citations_data=s.prepareData_allCitations(t),n.eigenfactor_sum_data=s.prepareData_authorEigenfactorSum(t),n.egoGraphVis=new egoGraphVis(n.graph_data),n.lineCharts=[],n.lineCharts.push(new lineChartByYear(n.publications_data)),n.lineCharts.push(new lineChartByYear(n.all_citations_data)),n.lineCharts.push(new lineChartByYear(n.eigenfactor_sum_data)),l.transitionTimePerYear=n.getTransitionTimePerYear(t),n.egoGraphVis.importDefaultOptions(l);for(var u=0;u<n.lineCharts.length;u++)n.lineCharts[u].importDefaultOptions(l);for(n.egoGraphVis.init(),u=0;u<n.lineCharts.length;u++)n.lineCharts[u].init();$.event.trigger({type:"initComplete"}),n.lineCharts[0].addTitle("Number of publications"),n.lineCharts[1].addTitle("Number of citations received");var c=function(e){for(var t=window.location.search.substring(1).split("&"),r=0;r<t.length;r++){var n=t[r].split("=");if(n[0]==e)return n[1]}return!1}("ctrtype");c||(c="author"),console.log(c),n.lineCharts[2].addTitle("Sum of eigenfactor for this "+c+"'s publications by year"),$(document).on("yearChange",function(){for(var e=n.egoGraphVis.currYear,t=0;t<n.lineCharts.length;t++)n.lineCharts[t].moveYearIndicator(e)}),d3.select(n.lineCharts[0].chartDiv[0][0]).select(".y.axis").select(".axisLabel").text("Num publications"),n.lineCharts[2].yAxis.tickFormat(d3.format("e")),d3.select(n.lineCharts[2].chartDiv[0][0]).select(".y.axis").call(n.lineCharts[2].yAxis).select(".axisLabel").text("Sum of Eigenfactor"),n.yearTickClickEventListener(),d3.select(".loadingText").remove()}))};r.d(t,"main",function(){return a})}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,